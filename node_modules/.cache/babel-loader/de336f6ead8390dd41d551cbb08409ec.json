{"ast":null,"code":"'use strict';\n/** @module operations */\n\nconst _ = require('lodash');\n\nconst mutators = require('./mutators');\n/**\n * Operation definitions for parsing criteria objects.\n *\n * Keys are search strings in criteria keys. Values define an output SQL\n * operator and an optional mutator which will be applied to the appropriate\n * parameter value for the prepared statement.\n *\n * @enum\n * @readonly\n */\n\n\nconst map = {\n  // basic comparison\n  '=': {\n    operator: '=',\n    mutator: mutators.equality\n  },\n  '!': {\n    operator: '<>',\n    mutator: mutators.equality\n  },\n  '>': {\n    operator: '>'\n  },\n  '<': {\n    operator: '<'\n  },\n  '>=': {\n    operator: '>='\n  },\n  '<=': {\n    operator: '<='\n  },\n  '!=': {\n    operator: '<>',\n    mutator: mutators.equality\n  },\n  '<>': {\n    operator: '<>',\n    mutator: mutators.equality\n  },\n  'between': {\n    operator: 'BETWEEN',\n    mutator: mutators.buildBetween\n  },\n  // array\n  '@>': {\n    operator: '@>',\n    mutator: mutators.literalizeArray\n  },\n  '<@': {\n    operator: '<@',\n    mutator: mutators.literalizeArray\n  },\n  '&&': {\n    operator: '&&',\n    mutator: mutators.literalizeArray\n  },\n  // pattern matching\n  '~~': {\n    operator: 'LIKE'\n  },\n  'like': {\n    operator: 'LIKE'\n  },\n  '!~~': {\n    operator: 'NOT LIKE'\n  },\n  'not like': {\n    operator: 'NOT LIKE'\n  },\n  '~~*': {\n    operator: 'ILIKE'\n  },\n  'ilike': {\n    operator: 'ILIKE'\n  },\n  '!~~*': {\n    operator: 'NOT ILIKE'\n  },\n  'not ilike': {\n    operator: 'NOT ILIKE'\n  },\n  // regex\n  'similar to': {\n    operator: 'SIMILAR TO'\n  },\n  'not similar to': {\n    operator: 'NOT SIMILAR TO'\n  },\n  '~': {\n    operator: '~'\n  },\n  '!~': {\n    operator: '!~'\n  },\n  '~*': {\n    operator: '~*'\n  },\n  '!~*': {\n    operator: '!~*'\n  },\n  // comparison predicates\n  'is': {\n    operator: 'IS',\n    mutator: mutators.buildIs\n  },\n  'is not': {\n    operator: 'IS NOT',\n    mutator: mutators.buildIs\n  },\n  'is distinct from': {\n    operator: 'IS DISTINCT FROM'\n  },\n  'is not distinct from': {\n    operator: 'IS NOT DISTINCT FROM'\n  }\n};\n/**\n * Get an operation definition.\n *\n * @param {String} key - An operation key.\n * @default Equality\n * @return {Object} An operation definition, cloned for safety.\n */\n\nexports = module.exports = key => {\n  if (key) {\n    return _.clone(map[key]);\n  }\n\n  return _.clone(map['=']);\n};","map":null,"metadata":{},"sourceType":"script"}