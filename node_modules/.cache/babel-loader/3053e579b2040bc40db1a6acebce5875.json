{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  os: require('os'),\n  utils: require('../utils'),\n  QueryFileError: require('./queryFile')\n};\n/**\r\n * @class errors.ParameterizedQueryError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used\r\n * explicitly or implicitly (via a simple `{text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Parameterized Query object.\r\n *\r\n * @see ParameterizedQuery\r\n */\n\nclass ParameterizedQueryError extends Error {\n  constructor(error, ps) {\n    const isQueryFileError = error instanceof npm.QueryFileError;\n    const message = isQueryFileError ? 'Failed to initialize \\'text\\' from a QueryFile.' : error;\n    super(message);\n    this.name = this.constructor.name;\n\n    if (isQueryFileError) {\n      this.error = error;\n    }\n\n    this.result = ps;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\r\n * @method errors.ParameterizedQueryError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\n\nParameterizedQueryError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n        gap1 = npm.utils.messageGap(level + 1),\n        gap2 = npm.utils.messageGap(level + 2),\n        lines = ['ParameterizedQueryError {', gap1 + 'message: \"' + this.message + '\"', gap1 + 'result: {', gap2 + 'text: ' + JSON.stringify(this.result.text), gap2 + 'values: ' + JSON.stringify(this.result.values), gap1 + '}'];\n\n  if (this.error) {\n    lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\n  }\n\n  lines.push(gap0 + '}');\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(ParameterizedQueryError, function () {\n  return this.toString();\n});\nmodule.exports = ParameterizedQueryError;","map":null,"metadata":{},"sourceType":"script"}