{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  con: require('manakin').local,\n  utils: require('./utils')\n};\n/**\r\n * @class DatabasePool\r\n * @private\r\n */\n\nclass DatabasePool {\n  constructor() {\n    this.dbMap = {}; // map of used database context keys (connection + dc)\n\n    this.dbs = []; // all database objects\n  }\n  /**\r\n   * @method DatabasePool.register\r\n   * @private\r\n   * @description\r\n   *  - Registers each database object, to make sure no duplicates connections are used,\r\n   *    and if they are, produce a warning;\r\n   *  - Registers each Pool object, to be able to release them all when requested.\r\n   *\r\n   * @param {Database} db - The new Database object being registered.\r\n   */\n\n\n  register(db) {\n    const cnKey = DatabasePool.createContextKey(db);\n    npm.utils.addReadProp(db, '$cnKey', cnKey, true);\n\n    if (cnKey in this.dbMap) {\n      this.dbMap[cnKey]++;\n      /* istanbul ignore if */\n\n      if (!db.$config.options.noWarnings) {\n        npm.con.warn('WARNING: Creating a duplicate database object for the same connection.\\n%s\\n', npm.utils.getLocalStack(5));\n      }\n    } else {\n      this.dbMap[cnKey] = 1;\n    }\n\n    this.dbs.push(db);\n  }\n  /**\r\n   * @method DatabasePool.unregister\r\n   * @param db\r\n   */\n\n\n  unregister(db) {\n    const cnKey = db.$cnKey;\n\n    if (! --this.dbMap[cnKey]) {\n      delete this.dbMap[cnKey];\n    }\n  }\n  /**\r\n   * @method DatabasePool.shutDown\r\n   * @private\r\n   */\n\n\n  shutDown() {\n    this.dbs.forEach(db => {\n      db.$destroy();\n    });\n    this.dbs.length = 0;\n    this.dbMap = {};\n  }\n  /**\r\n   * @method DatabasePool.createContextKey\r\n   * @static\r\n   * @private\r\n   * @description\r\n   * For connections that are objects it reorders the keys alphabetically,\r\n   * and then serializes the result into a JSON string.\r\n   *\r\n   * @param {Database} db - Database instance.\r\n   */\n\n\n  static createContextKey(db) {\n    let cn = db.$cn;\n\n    if (typeof cn === 'object') {\n      const obj = {},\n            keys = Object.keys(cn).sort();\n      keys.forEach(name => {\n        obj[name] = cn[name];\n      });\n      cn = obj;\n    }\n\n    return JSON.stringify(npm.utils.getSafeConnection(cn)) + JSON.stringify(db.$dc);\n  }\n\n}\n\nmodule.exports = new DatabasePool();","map":null,"metadata":{},"sourceType":"script"}