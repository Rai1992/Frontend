{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst parseKey = require('../util/parse-key');\n\nconst where = require('./where');\n/**\n * Represents a DELETE query.\n *\n * @class\n * @param {Table} source - Database object to query.\n * @param {Object|String|Number} [criteria] - A criteria object or primitive pk\n * value.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Delete options}.\n */\n\n\nconst Delete = function (source, criteria = {}, options = {}) {\n  options = _.defaults(options, {\n    only: false,\n    generator: 'tableGenerator',\n    single: false\n  });\n  this.source = source;\n  this.only = options.only;\n  this.build = options.build;\n  this.decompose = options.decompose;\n  this.document = options.document;\n  this.generator = options.generator;\n  this.single = options.single;\n  this.stream = options.stream; // get fields to return from options\n\n  this.fields = options.fields ? options.fields.map(f => parseKey(f).field) : ['*'];\n\n  if (source.isPkSearch(criteria, options)) {\n    if (_.isPlainObject(criteria)) {\n      // id:val search\n      this.where = where(criteria);\n    } else {\n      // primitive unary pk search\n      this.where = where(_.fromPairs([[source.pk[0], criteria]]));\n      this.single = true;\n    }\n  } else {\n    this.where = where(criteria, 0, this.generator);\n  }\n\n  this.params = this.where.params;\n};\n/**\n * Format this object into a SQL DELETE.\n *\n * @return {String} A SQL DELETE statement.\n */\n\n\nDelete.prototype.format = function () {\n  let sql = 'DELETE FROM ';\n\n  if (this.only) {\n    sql += 'ONLY ';\n  }\n\n  sql += \"\".concat(this.source.delimitedFullName, \" WHERE \").concat(this.where.conditions, \" \");\n  sql += \"RETURNING \".concat(this.fields.join(', '));\n  return sql;\n};\n\nmodule.exports = Delete;","map":null,"metadata":{},"sourceType":"script"}