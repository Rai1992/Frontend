{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  assertOptions: require('assert-options'),\n  con: require('manakin').local,\n  path: require('path'),\n  pg: require('pg'),\n  minify: require('pg-minify'),\n  adapter: require('./adapter'),\n  result: require('./result'),\n  promise: require('./promise'),\n  formatting: require('./formatting'),\n  helpers: require('./helpers'),\n  queryFile: require('./queryFile'),\n  errors: require('./errors'),\n  utils: require('./utils'),\n  pubUtils: require('./utils/public'),\n  mode: require('./txMode'),\n  types: require('./types'),\n  dbPool: require('./dbPool'),\n  package: require('../package.json'),\n  text: require('./text')\n};\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @param {object} [options]\r\n * Library Initialization Options.\r\n *\r\n * @param {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @param {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @param {boolean} [options.noLocking=false]\r\n * Prevents protocol locking.\r\n *\r\n * By default, the library locks much of its protocol to read-only access, as a fool-proof mechanism.\r\n * Specifically for the {@link event:extend extend} event this serves as a protection against overriding existing\r\n * properties or trying to set them at the wrong time.\r\n *\r\n * If this provision gets in the way of using a mock-up framework for your tests, you can force\r\n * the library to deactivate most of the locks by setting `noLocking` = `true` within the options.\r\n *\r\n * This option is dynamic (can be set before or after initialization). However, changing it after the library's\r\n * initialization will not affect {@link Database} objects that have already been created.\r\n *\r\n * @param {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */\n\nfunction $main(options) {\n  options = npm.assertOptions(options, ['pgFormatting', 'pgNative', 'promiseLib', 'noLocking', 'capSQL', 'noWarnings', 'connect', 'disconnect', 'query', 'receive', 'task', 'transact', 'error', 'extend', 'schema']);\n  let pg = npm.pg;\n  const p = npm.promise(options.promiseLib);\n  const config = {\n    version: npm.package.version,\n    promiseLib: p.promiseLib,\n    promise: p.promise\n  };\n  npm.utils.addReadProp(config, '$npm', {}, true); // Locking properties that cannot be changed later:\n\n  npm.utils.addReadProp(options, 'promiseLib', options.promiseLib);\n  npm.utils.addReadProp(options, 'pgNative', !!options.pgNative);\n  config.options = options; // istanbul ignore next:\n  // we do not cover code specific to Native Bindings\n\n  if (options.pgNative) {\n    pg = npm.pg.native;\n\n    if (npm.utils.isNull(pg)) {\n      throw new Error(npm.text.nativeError);\n    }\n  }\n\n  const Database = require('./database')(config);\n\n  const inst = (cn, dc) => {\n    if (npm.utils.isText(cn) || cn && typeof cn === 'object') {\n      return new Database(cn, dc, config);\n    }\n\n    throw new TypeError('Invalid connection details: ' + JSON.stringify(cn));\n  };\n\n  npm.utils.addReadProperties(inst, rootNameSpace);\n  /**\r\n   * @member {external:PG} pg\r\n   * @readonly\r\n   * @description\r\n   * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n   *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n   *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n   *\r\n   * Available as `pgp.pg`, after initializing the library.\r\n   */\n\n  npm.utils.addReadProp(inst, 'pg', pg);\n  /**\r\n   * @member {function} end\r\n   * @readonly\r\n   * @description\r\n   * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n   * It is available as `pgp.end`, after initializing the library.\r\n   *\r\n   * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n   * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n   *\r\n   * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n   * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n   *\r\n   * For more details see $[Library de-initialization].\r\n   */\n\n  npm.utils.addReadProp(inst, 'end', () => {\n    npm.dbPool.shutDown();\n  });\n  /**\r\n   * @member {helpers} helpers\r\n   * @readonly\r\n   * @description\r\n   * Namespace for {@link helpers all query-formatting helper functions}.\r\n   *\r\n   * Available as `pgp.helpers`, after initializing the library.\r\n   *\r\n   * @see {@link helpers}.\r\n   */\n\n  npm.utils.addReadProp(inst, 'helpers', npm.helpers(config));\n  /**\r\n   * @member {external:spex} spex\r\n   * @readonly\r\n   * @description\r\n   * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n   *\r\n   * Available as `pgp.spex`, after initializing the library.\r\n   *\r\n   * @see\r\n   * {@link Task#batch},\r\n   * {@link Task#page},\r\n   * {@link Task#sequence}\r\n   */\n\n  npm.utils.addReadProp(inst, 'spex', config.$npm.spex);\n  config.pgp = inst;\n  npm.utils.lock(config, true, options);\n  return inst;\n}\n\nconst rootNameSpace = {\n  /**\r\n   * @member {formatting} as\r\n   * @readonly\r\n   * @description\r\n   * Namespace for {@link formatting all query-formatting functions}.\r\n   *\r\n   * Available as `pgp.as`, before and after initializing the library.\r\n   *\r\n   * @see {@link formatting}.\r\n   */\n  as: npm.formatting.as,\n\n  /**\r\n   * @member {external:pg-minify} minify\r\n   * @readonly\r\n   * @description\r\n   * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n   *\r\n   * Available as `pgp.minify`, before and after initializing the library.\r\n   */\n  minify: npm.minify,\n\n  /**\r\n   * @member {queryResult} queryResult\r\n   * @readonly\r\n   * @description\r\n   * Query Result Mask enumerator.\r\n   *\r\n   * Available as `pgp.queryResult`, before and after initializing the library.\r\n   */\n  queryResult: npm.result,\n\n  /**\r\n   * @member {PromiseAdapter} PromiseAdapter\r\n   * @readonly\r\n   * @description\r\n   * {@link PromiseAdapter} class.\r\n   *\r\n   * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n   */\n  PromiseAdapter: npm.adapter,\n\n  /**\r\n   * @member {ParameterizedQuery} ParameterizedQuery\r\n   * @readonly\r\n   * @description\r\n   * {@link ParameterizedQuery} class.\r\n   *\r\n   * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n   */\n  ParameterizedQuery: npm.types.ParameterizedQuery,\n\n  /**\r\n   * @member {PreparedStatement} PreparedStatement\r\n   * @readonly\r\n   * @description\r\n   * {@link PreparedStatement} class.\r\n   *\r\n   * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n   */\n  PreparedStatement: npm.types.PreparedStatement,\n\n  /**\r\n   * @member {QueryFile} QueryFile\r\n   * @readonly\r\n   * @description\r\n   * {@link QueryFile} class.\r\n   *\r\n   * Available as `pgp.QueryFile`, before and after initializing the library.\r\n   */\n  QueryFile: npm.queryFile,\n\n  /**\r\n   * @member {errors} errors\r\n   * @readonly\r\n   * @description\r\n   * {@link errors} - namespace for all error types.\r\n   *\r\n   * Available as `pgp.errors`, before and after initializing the library.\r\n   */\n  errors: npm.errors,\n\n  /**\r\n   * @member {utils} utils\r\n   * @readonly\r\n   * @description\r\n   * {@link utils} - namespace for utility functions.\r\n   *\r\n   * Available as `pgp.utils`, before and after initializing the library.\r\n   */\n  utils: npm.pubUtils,\n\n  /**\r\n   * @member {txMode} txMode\r\n   * @readonly\r\n   * @description\r\n   * {@link txMode Transaction Mode} namespace.\r\n   *\r\n   * Available as `pgp.txMode`, before and after initializing the library.\r\n   */\n  txMode: npm.mode\n};\nnpm.utils.addReadProperties($main, rootNameSpace);\nmodule.exports = $main;\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\n\n/**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */\n\n/**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */\n\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\n\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */","map":null,"metadata":{},"sourceType":"script"}