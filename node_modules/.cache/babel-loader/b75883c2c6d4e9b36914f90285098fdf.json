{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst util = require('util');\n\nconst Entity = require('./entity');\n\nconst Select = require('./statement/select');\n\nconst isUuid = new RegExp(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n/**\n * A readable database entity (table or view).\n *\n * @class\n * @extends Entity\n * @param {Object} spec - An {@linkcode Entity} specification representing a\n * readable object:\n * @param {Object} spec.db - A {@linkcode Database}.\n * @param {String} spec.name - The table or view's name.\n * @param {String} spec.schema - The name of the schema owning the table or\n * view.\n * @param {Boolean} [spec.is_matview] - Whether the object is a materialized view\n * (default false).\n */\n\nconst Readable = function (spec) {\n  Entity.apply(this, arguments);\n  this.isMatview = spec.is_matview || false;\n};\n\nutil.inherits(Readable, Entity);\n/**\n * Count rows matching criteria. There are two ways to use this method:\n *\n * 1. find() style: db.mytable.count({field: value});\n * 2. where() style: db.mytable.count(\"field=$1\", [value]);\n *\n * @param {Object|String} conditions - A criteria object or SQL predicate.\n * @param {Array} params - Prepared statement parameters for use with raw SQL\n * predicates.\n * @return {Promise} Row count.\n */\n\nReadable.prototype.count = function (conditions = {}, params = []) {\n  if (_.isString(conditions)) {\n    conditions = {\n      conditions,\n      params\n    };\n  }\n\n  const query = new Select(this, conditions, {\n    exprs: {\n      count: 'COUNT(1)'\n    },\n    order: null,\n    single: true\n  });\n  return this.db.query(query).then(res => res.count);\n};\n/**\n * Count documents matching criteria. Unlike count, this function only supports\n * criteria objects.\n *\n * @param {Object} criteria - A criteria object.\n * @return {Promise} Number of matching documents.\n */\n\n\nReadable.prototype.countDoc = function (criteria = {}) {\n  const query = new Select(this, criteria, {\n    exprs: {\n      count: 'COUNT(1)'\n    },\n    order: null,\n    single: true,\n    generator: 'docGenerator'\n  });\n  return this.db.query(query).then(res => res.count);\n};\n/**\n * Find rows matching criteria.\n *\n * @param {Object|UUID|Number} criteria - A criteria object or primary key value.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Select options}.\n * @return {Promise} An array containing any query results.\n */\n\n\nReadable.prototype.find = function (criteria = {}, options = {}) {\n  return this.db.query(new Select(this, criteria, options));\n};\n/**\n * Find a document by searching in the body.\n *\n * @param {Object|UUID|Number} [criteria] - A criteria object or primary key value.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Select options}.\n * @return {Promise} An array containing any query results.\n */\n\n\nReadable.prototype.findDoc = function (criteria = {}, options = {}) {\n  options.document = true;\n  options.generator = 'docGenerator';\n  return this.find(criteria, options);\n};\n/**\n * Return a single record.\n *\n * @param {Object|UUID|Number} criteria - A criteria object or primary key value.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Select options}.\n * @return {Promise} An object representing the (first) record found, or\n * null if no records match.\n */\n\n\nReadable.prototype.findOne = function () {\n  const opts = arguments[1] || {};\n  opts.single = true;\n  return this.find(arguments[0], opts);\n};\n/**\n * Refresh a materialized view.\n *\n * @param {Boolean} [concurrently] - Do it without locking reads.\n * @return {Promise} A query with no results.\n */\n\n\nReadable.prototype.refresh = function (concurrently) {\n  if (!this.isMatview) {\n    return this.db.$p.reject(new Error(\"\".concat(this.delimitedName, \" is not a materialized view\")));\n  }\n\n  const concurrentlyStr = concurrently ? 'CONCURRENTLY' : '';\n  return this.db.query(\"REFRESH MATERIALIZED VIEW \".concat(concurrentlyStr, \" \").concat(this.delimitedFullName));\n};\n/**\n * Determine whether criteria represent a search by primary key. If a number or\n * uuid are passed, it is assumed to be a primary key value; if an object, it\n * must have only one key, which must specify the primary key column.\n *\n * @param {Object|String|Number} criteria - A criteria object or primitive to\n * test.\n * @return {Boolean} True if the criteria represent a primary key search.\n */\n\n\nReadable.prototype.isPkSearch = function (criteria) {\n  // disqualify non-tables and foreign tables\n  if (!this.pk) {\n    return false;\n  }\n\n  if (_.isNumber(criteria)) {\n    // ordinary numeric pk\n    return true;\n  } else if (_.isString(criteria) && (+criteria === +criteria || isUuid.test(criteria))) {\n    // eslint-disable-line no-self-compare\n    // stringified number or uuid\n    return true;\n  } else if (_.isPlainObject(criteria)) {\n    const criteriaKeys = Object.keys(criteria);\n    return this.pk.every(keyColumn => {\n      if (Object.prototype.hasOwnProperty.call(criteria, keyColumn)) {\n        return true;\n      }\n\n      return criteriaKeys.some(k => new RegExp(\"^\".concat(keyColumn, \"[^\\\\w\\\\d]?\")).test(k));\n    });\n  }\n\n  return false;\n};\n/**\n * Perform a full-text search on queryable fields. If options.document is true,\n * looks in the document body fields instead of the table columns.\n *\n * @param {Object} plan - Search definition.\n * @param {Array} plan.fields - List of the fields to search.\n * @param {String} plan.term - Search term.\n * @param {Object} [plan.where] - Criteria object to filter results.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Select options}.\n * @return {Promise} An array containing any query results.\n */\n\n\nReadable.prototype.search = function (plan, options = {}) {\n  if (!plan.fields || !plan.term) {\n    return this.db.$p.reject(new Error('Need fields as an array and a term string'));\n  }\n\n  let tsv;\n\n  if (plan.fields.length === 1) {\n    tsv = plan.fields[0];\n\n    if (tsv.indexOf('>>') === -1) {\n      tsv = \"\\\"\".concat(tsv, \"\\\"\"); // just a column, quote it to preserve casing\n    }\n  } else {\n    tsv = \"concat(\".concat(plan.fields.join(\", ' ', \"), \")\"); // eslint-disable-line quotes\n  }\n\n  const criteria = {\n    conditions: \"to_tsvector(\".concat(tsv, \") @@ to_tsquery($1)\"),\n    params: [plan.term],\n    where: plan.where\n  };\n  const query = new Select(this, criteria, options);\n  return this.db.query(query);\n};\n/**\n * Shortcut to perform a full text search on a document table.\n *\n * @param {Object} plan - Search definition.\n * @param {Array} [plan.fields] - List of the document keys to search.\n * @param {String} plan.term - Search term.\n * @param {Object} [plan.where] - Criteria object to filter results.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Select options}.\n * @return {Promise} An array containing any query results.\n */\n\n\nReadable.prototype.searchDoc = function (plan, options = {}) {\n  if (!plan.term) {\n    return this.db.$p.reject(new Error('Need fields as an array and a term string'));\n  }\n\n  let tsv; // TODO 'where' functionality might be better at processing search params for JSON etc\n\n  if (!plan.fields) {\n    tsv = 'search';\n  } else if (plan.fields.length === 1) {\n    tsv = \"to_tsvector(body ->> '\".concat(plan.fields[0], \"')\");\n  } else {\n    const formattedKeys = plan.fields.map(key => {\n      return \"(body ->> '\".concat(key, \"')\");\n    });\n    tsv = \"to_tsvector(concat(\".concat(formattedKeys.join(\", ' ',\"), \"))\"); // eslint-disable-line quotes\n  }\n\n  const criteria = {\n    conditions: \"\".concat(tsv, \" @@ to_tsquery($1)\"),\n    params: [plan.term],\n    where: plan.where,\n    nestedGenerator: options.document ? 'docGenerator' : 'tableGenerator'\n  };\n  options.document = true; // ensure document result handling activates\n\n  const query = new Select(this, criteria, options);\n  return this.db.query(query);\n};\n/**\n * Run a query with a raw SQL predicate, eg:\n *\n * db.mytable.where('id=$1', [123]).then(...);\n *\n * @param {String} conditions - A raw SQL predicate.\n * @param {Array} [params] - Prepared statement parameters.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Select options}.\n * @return {Promise} An array containing any query results.\n */\n\n\nReadable.prototype.where = function (conditions, params = [], options) {\n  if (!_.isArray(params) && !_.isPlainObject(params)) {\n    params = [params];\n  }\n\n  const query = new Select(this, {\n    conditions,\n    params\n  }, options);\n  return this.db.query(query);\n};\n\nmodule.exports = Readable;","map":null,"metadata":{},"sourceType":"script"}