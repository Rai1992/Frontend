{"ast":null,"code":"'use strict';\n/**\r\n * @class PromiseAdapter\r\n * @description\r\n * Adapter for the primary promise operations.\r\n *\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * #### Example\r\n *\r\n * Below is an example of setting up a [client-side]{@tutorial client} adapter for AngularJS $q.\r\n *\r\n * ```js\r\n * var spexLib = require('spex'); // or include client-side spex.js\r\n *\r\n * var adapter = new spexLib.PromiseAdapter(\r\n *    function (cb) {\r\n *        return $q(cb); // creating a new promise;\r\n *    }, function (data) {\r\n *        return $q.when(data); // resolving a promise;\r\n *    }, function (reason) {\r\n *        return $q.reject(reason); // rejecting a promise;\r\n *    });\r\n *\r\n * var spex = spexLib(adapter);\r\n * ```\r\n * Please note that AngularJS 1.4.1 or later no longer requires a promise adapter.\r\n *\r\n * @param {Function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {Function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {Function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @see {@tutorial client}\r\n *\r\n * @returns {PromiseAdapter}\r\n */\n\nfunction PromiseAdapter(create, resolve, reject) {\n  if (!(this instanceof PromiseAdapter)) {\n    return new PromiseAdapter(create, resolve, reject);\n  }\n\n  this.create = create;\n  this.resolve = resolve;\n  this.reject = reject;\n\n  if (typeof create !== 'function') {\n    throw new TypeError('Adapter requires a function to create a promise.');\n  }\n\n  if (typeof resolve !== 'function') {\n    throw new TypeError('Adapter requires a function to resolve a promise.');\n  }\n\n  if (typeof reject !== 'function') {\n    throw new TypeError('Adapter requires a function to reject a promise.');\n  }\n}\n\nmodule.exports = PromiseAdapter;","map":null,"metadata":{},"sourceType":"script"}