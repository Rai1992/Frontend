{"ast":null,"code":"'use strict';\n/** @module mutators */\n\nconst _ = require('lodash');\n\nconst castTimestamp = value => {\n  if (_.isDate(value)) {\n    return '::timestamptz';\n  }\n\n  return '';\n};\n/**\n * Build a BETWEEN (a, b) predicate.\n *\n * @param {Object} condition - A condition object from {@link module:where~getCondition}.\n * @return {Object} The modified condition.\n */\n\n\nexports.buildBetween = condition => {\n  condition.params = condition.value;\n  condition.value = \"$\".concat(condition.offset).concat(castTimestamp(condition.value[0]), \" AND $\").concat(condition.offset + 1).concat(castTimestamp(condition.value[1]));\n  condition.offset += 2;\n  return condition;\n};\n/**\n * Build an IN (x, y, z) predicate.\n *\n * @param {Object} condition - A condition object from {@link module:where~getCondition}.\n * @return {Object} The modified condition.\n */\n\n\nexports.buildIn = condition => {\n  condition.appended.operator = condition.appended.operator === '=' ? 'IN' : 'NOT IN';\n\n  const inList = _.reduce(condition.value, (list, v) => {\n    condition.params.push(v);\n    return list.concat([\"$\".concat(condition.offset++).concat(castTimestamp(v))]);\n  }, []);\n\n  condition.value = \"(\".concat(inList.join(','), \")\");\n  return condition;\n};\n/**\n * Interpolate values into a predicate with IS/IS NOT.\n *\n * @param {Object} condition - A condition object from {@link module:where~getCondition}.\n * @return {Object} The modified condition.\n */\n\n\nexports.buildIs = function (condition) {\n  if (condition.appended.operator === '=' || condition.appended.operator === 'IS') {\n    condition.appended.operator = 'IS';\n  } else {\n    condition.appended.operator = 'IS NOT';\n  }\n\n  return condition;\n};\n/**\n * Handle the overloads for equality tests: interpolating null and boolean\n * values and building IN lists.\n *\n * @param {Object} condition - A condition object from {@link module:where~getCondition}.\n * @return {Object} The modified condition.\n */\n\n\nexports.equality = function (condition) {\n  if (condition.value === null || _.isBoolean(condition.value)) {\n    return exports.buildIs(condition);\n  } else if (_.isArray(condition.value)) {\n    return exports.buildIn(condition);\n  }\n\n  condition.params.push(condition.value);\n  condition.value = \"$\".concat(condition.offset).concat(castTimestamp(condition.value));\n  return condition;\n};\n/**\n * Transform an array into a safe comma-delimited string literal.\n *\n * @param {Object} condition - A condition object from {@link module:where~getCondition}.\n * @return {Object} The modified condition.\n */\n\n\nexports.literalizeArray = condition => {\n  if (_.isArray(condition.value)) {\n    const sanitizedValues = condition.value.map(function (v) {\n      if (_.isString(v) && (v === '' || v === 'null' || v.search(/[,{}\\s\\\\\"]/) !== -1)) {\n        return \"\\\"\".concat(v.replace(/([\\\\\"])/g, '\\\\$1'), \"\\\"\");\n      } else if (v === null) {\n        return 'null';\n      }\n\n      return v;\n    });\n    condition.params.push(\"{\".concat(sanitizedValues.join(','), \"}\"));\n  } else {\n    condition.params.push(condition.value);\n  }\n\n  condition.value = \"$\".concat(condition.offset).concat(castTimestamp(condition.value));\n  return condition;\n};","map":null,"metadata":{},"sourceType":"script"}