{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst assertOptions = require('assert-options');\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\n\n\nclass PromiseAdapter {\n  constructor(api) {\n    if (!api || typeof api !== 'object') {\n      throw new TypeError('Adapter requires an api configuration object.');\n    }\n\n    api = assertOptions(api, ['create', 'resolve', 'reject', 'all']);\n    this.create = api.create;\n    this.resolve = api.resolve;\n    this.reject = api.reject;\n    this.all = api.all;\n\n    if (typeof this.create !== 'function') {\n      throw new TypeError('Function \\'create\\' must be specified.');\n    }\n\n    if (typeof this.resolve !== 'function') {\n      throw new TypeError('Function \\'resolve\\' must be specified.');\n    }\n\n    if (typeof this.reject !== 'function') {\n      throw new TypeError('Function \\'reject\\' must be specified.');\n    }\n\n    if (typeof this.all !== 'function') {\n      throw new TypeError('Function \\'all\\' must be specified.');\n    }\n  }\n\n}\n\nmodule.exports = PromiseAdapter;","map":null,"metadata":{},"sourceType":"script"}