{"ast":null,"code":"const bcrypt = require('bcryptjs');\n\nmodule.exports = {\n  async register(req, res) {\n    console.log(req.body);\n    const _req$body = req.body,\n          username = _req$body.username,\n          email = _req$body.email,\n          first_name = _req$body.first_name,\n          last_name = _req$body.last_name,\n          password = _req$body.password;\n    const db = req.app.get(\"db\"); //Checks to make sure that no one else has the same email, returns an array\n\n    const isUserEmailTaken = await db.find_user_by_email(email); //If there is an object inside the array, (which should only ever be at max 1 long) let the user know that teair email is allready taken.\n\n    if (isUserEmailTaken.length = 0) {\n      return res.status(200).send({\n        message: \"email is taken\"\n      });\n    } //generates a salt and hashes the pw the user gave so the password in the database is secure\n\n\n    const salt = bcrypt.genSaltSync(10);\n    const hash = bcrypt.hashSync(password, salt); //adds the user to the database and returns their database info without the hash\n\n    const user = await db.register_user(email, first_name, last_name, username, hash);\n    console.log(user); //here we are going to automatically log the user back in\n\n    req.session.user = {\n      email: user[0].email,\n      first_name: user[0].first_name,\n      last_name: user[0].last_name,\n      username: user[0].username\n    };\n    res.status(200).send(req.session.user);\n  },\n\n  async login(req, res) {\n    const _req$body2 = req.body,\n          email = _req$body2.email,\n          password = _req$body2.password;\n    const db = req.app.get(\"db\"); //same as register, except we are grabbing all the information, that way if we DO find a users email we can check if the password the user gave us matches up.\n\n    console.log('1');\n    const user = await db.find_user_by_email_login(email); //if the email was not found then return a message that the account does not exist\n\n    if (!user[0]) {\n      return res.status(404).send({\n        message: 'Account does not exist. Please Register.'\n      });\n    }\n\n    console.log(user[0]); //result is a true or false value, we are testing against the hash created when a user is registered and the one the user is giving us to login\n\n    const result = bcrypt.compareSync(password, user[0].hash); //if the result is false\n\n    if (!result) {\n      return res.status(404).send({\n        message: \"Incorrect password\"\n      });\n    } //only one user should ever be found at a time, so since the response is an array of object(s) we are going to grab the first one, and set our session user to it.\n    //if you are not really familiar with express-session then basically we can add information to a req.session object that will be saved to a users cookies. If we want to grab the current logged in user for any functions in the back end, we can use req.session.*object you created here*, so we use it for req.session.user\n\n\n    req.session.user = {\n      email: user[0].email,\n      first_name: user[0].first_name,\n      last_name: user[0].last_name,\n      username: user[0].username\n    };\n    console.log(req.session.user, '123123123213');\n    res.status(200).send(req.session.user);\n  },\n\n  async logout(req, res) {\n    //removes the req.session \n    req.session.destroy();\n    return res.status(200).send({\n      message: \"you have successfully logged out\"\n    });\n  },\n\n  async createListing(req, res) {\n    const _req$body3 = req.body,\n          list_name = _req$body3.list_name,\n          condition = _req$body3.condition,\n          price = _req$body3.price,\n          available = _req$body3.available,\n          city = _req$body3.city,\n          username = _req$body3.username,\n          email = _req$body3.email,\n          category = _req$body3.category;\n    const db = req.app.get('db');\n\n    if (available.toLowerCase() === 'true') {\n      await db.create_new_listing(list_name, username, condition, price, true, city, email, category).catch(err => console.log(err));\n    } else {\n      await db.create_new_listing(list_name, username, condition, price, false, city, email, category).catch(err => console.log(err));\n    }\n\n    ; //returns a status of 200 to our front end\n\n    res.sendStatus(200);\n  },\n\n  async grabAllListings(req, res) {\n    const db = req.app.get('db');\n    const listings = await db.grab_all_listings().catch(err => res.status(402).send(err));\n    res.status(200).send(listings);\n  },\n\n  async deleteListing(req, res) {\n    const id = req.params.id;\n    const db = req.app.get('db');\n    await db.delete_listing(id).then(() => {\n      console.log('deleted');\n      res.sendStatus(200);\n    }).catch(err => {\n      console.log(err);\n      res.sendStatus(404);\n    }); //incase it doesnt hit catch or then\n\n    res.status(500).send('delete');\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}