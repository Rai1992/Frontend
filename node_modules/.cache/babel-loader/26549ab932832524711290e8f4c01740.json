{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  con: require('manakin').local,\n  utils: require('./utils'),\n  events: require('./events'),\n  text: require('./text'),\n  formatting: require('./formatting')\n};\n\nfunction poolConnect(ctx, db, config) {\n  return config.promise((resolve, reject) => {\n    const p = db.$pool;\n\n    if (p.ending) {\n      db.$destroy();\n      const err = new Error(npm.text.poolDestroyed);\n      npm.events.error(ctx.options, err, {\n        dc: ctx.dc\n      });\n      reject(err);\n      return;\n    }\n\n    p.connect((err, client, done) => {\n      if (err) {\n        npm.events.error(ctx.options, err, {\n          cn: npm.utils.getSafeConnection(ctx.cn),\n          dc: ctx.dc\n        });\n        reject(err);\n      } else {\n        if ('$useCount' in client) {\n          client.$useCount++;\n        } else {\n          Object.defineProperty(client, '$useCount', {\n            value: 0,\n            configurable: false,\n            enumerable: false,\n            writable: true\n          });\n          hidePassword(client); // See: https://github.com/brianc/node-postgres/issues/1568\n\n          setSchema(client, ctx);\n        }\n\n        setCtx(client, ctx);\n        const end = lockClientEnd(client);\n        client.on('error', onError);\n        resolve({\n          client,\n          useCount: client.$useCount,\n\n          done(e) {\n            client.end = end;\n            done(e);\n            npm.events.disconnect(ctx, client);\n            client.removeListener('error', onError);\n          }\n\n        });\n        npm.events.connect(ctx, client, client.$useCount);\n      }\n    });\n  });\n}\n\nfunction directConnect(ctx, config) {\n  return config.promise((resolve, reject) => {\n    const client = new config.pgp.pg.Client(ctx.cn);\n    client.connect(err => {\n      if (err) {\n        npm.events.error(ctx.options, err, {\n          cn: npm.utils.getSafeConnection(ctx.cn),\n          dc: ctx.dc\n        });\n        reject(err);\n      } else {\n        hidePassword(client); // See: https://github.com/brianc/node-postgres/issues/1568\n\n        setSchema(client, ctx);\n        setCtx(client, ctx);\n        const end = lockClientEnd(client);\n        client.on('error', onError);\n        resolve({\n          client,\n          useCount: 0,\n\n          done() {\n            client.end = end;\n            client.end();\n            npm.events.disconnect(ctx, client);\n            client.removeListener('error', onError);\n          }\n\n        });\n        npm.events.connect(ctx, client, 0);\n      }\n    });\n  });\n} // this event only happens when the connection is lost physically,\n// which cannot be tested automatically; removing from coverage:\n// istanbul ignore next\n\n\nfunction onError(err) {\n  const ctx = this.$ctx;\n  const cn = npm.utils.getSafeConnection(ctx.cn);\n  npm.events.error(ctx.options, err, {\n    cn,\n    dc: ctx.dc\n  });\n\n  if (ctx.cnOptions && typeof ctx.cnOptions.onLost === 'function' && !ctx.notified) {\n    try {\n      ctx.cnOptions.onLost.call(this, err, {\n        cn,\n        dc: ctx.dc,\n        start: ctx.start,\n        client: this\n      });\n    } catch (e) {\n      npm.con.error(e && e.stack || e);\n    }\n\n    ctx.notified = true;\n  }\n}\n\nfunction lockClientEnd(client) {\n  const end = client.end;\n\n  client.end = doNotCall => {\n    // This call can happen only in the following two cases:\n    // 1. the client made the call directly, against the library's documentation (invalid code)\n    // 2. connection with the server broke, and the pool is terminating all clients forcefully.\n    npm.con.error(npm.text.clientEnd + '\\n%s\\n', npm.utils.getLocalStack(3));\n\n    if (!doNotCall) {\n      end.call(client);\n    }\n  };\n\n  return end;\n}\n\nfunction setCtx(client, ctx) {\n  Object.defineProperty(client, '$ctx', {\n    value: ctx,\n    writable: true\n  });\n} // See: https://github.com/brianc/node-postgres/issues/1568\n\n\nfunction hidePassword(client) {\n  hideProperty(client, 'password');\n  hideProperty(client.connectionParameters, 'password');\n}\n\nfunction hideProperty(obj, prop) {\n  Object.defineProperty(obj, prop, {\n    value: obj[prop],\n    enumerable: false\n  });\n}\n\nfunction setSchema(client, ctx) {\n  let s = ctx.options.schema;\n\n  if (typeof s === 'function') {\n    s = s.call(ctx.dc, ctx.dc);\n  }\n\n  if (Array.isArray(s)) {\n    s = s.filter(a => a && typeof a === 'string');\n  }\n\n  if (s && typeof s === 'string' || Array.isArray(s) && s.length) {\n    client.query(npm.formatting.as.format('SET search_path TO $1:name', [s]), err => {\n      // istanbul ignore if;\n      if (err) {\n        // This is unlikely to ever happen, unless the connection is created faulty,\n        // and fails on the very first query, which is impossible to test automatically.\n        throw err;\n      }\n    });\n  }\n}\n\nmodule.exports = config => ({\n  pool: (ctx, db) => poolConnect(ctx, db, config),\n  direct: ctx => directConnect(ctx, config)\n});","map":null,"metadata":{},"sourceType":"script"}