{"ast":null,"code":"'use strict';\n\nvar npm = {\n  stat: require('./static')\n};\n\nmodule.exports = function ($p) {\n  var exp = {\n    formatError: npm.stat.formatError,\n    isPromise: npm.stat.isPromise,\n    isReadableStream: npm.stat.isReadableStream,\n    messageGap: npm.stat.messageGap,\n    extend: npm.stat.extend,\n    resolve: resolve,\n    wrap: wrap\n  };\n  return exp; //////////////////////////////////////////\n  // Checks if the function is a generator,\n  // and if so - wraps it up into a promise;\n\n  function wrap(func) {\n    if (typeof func === 'function') {\n      if (func.constructor.name === 'GeneratorFunction') {\n        return asyncAdapter(func);\n      }\n\n      return func;\n    }\n\n    return null;\n  } /////////////////////////////////////////////////////\n  // Resolves a mixed value into the actual value,\n  // consistent with the way mixed values are defined:\n  // https://github.com/vitaly-t/spex/wiki/Mixed-Values\n\n\n  function resolve(value, params, onSuccess, onError) {\n    var self = this,\n        delayed = false;\n\n    function loop() {\n      while (typeof value === 'function') {\n        if (value.constructor.name === 'GeneratorFunction') {\n          value = asyncAdapter(value);\n        }\n\n        try {\n          value = params ? value.apply(self, params) : value.call(self);\n        } catch (e) {\n          onError(e, false); // false means 'threw an error'\n\n          return;\n        }\n      }\n\n      if (exp.isPromise(value)) {\n        value.then(function (data) {\n          delayed = true;\n          value = data;\n          loop();\n          return null; // this dummy return is just to prevent Bluebird warnings;\n        }).catch(function (error) {\n          onError(error, true); // true means 'rejected'\n        });\n      } else {\n        onSuccess(value, delayed);\n      }\n    }\n\n    loop();\n  } // Generator-to-Promise adapter;\n  // Based on: https://www.promisejs.org/generators/#both\n\n\n  function asyncAdapter(generator) {\n    return function () {\n      var g = generator.apply(this, arguments);\n\n      function handle(result) {\n        if (result.done) {\n          return $p.resolve(result.value);\n        }\n\n        return $p.resolve(result.value).then(function (res) {\n          return handle(g.next(res));\n        }, function (err) {\n          return handle(g.throw(err));\n        });\n      }\n\n      return handle(g.next());\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}