{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst Entity = require('./entity');\n\nconst Select = require('./statement/select');\n/**\n * A database sequence.\n *\n * @class\n * @extends Entity\n * @param {Object} spec - An {@linkcode Entity} specification representing a\n * sequence object:\n * @param {Object} spec.db - A {@linkcode Database}.\n * @param {String} spec.name - The sequence's name.\n * @param {String} spec.schema - The name of the schema owning the sequence.\n */\n\n\nconst Sequence = function () {\n  Entity.apply(this, arguments);\n};\n\nutil.inherits(Sequence, Entity);\n/**\n * Get the last value the sequence returned.\n *\n * @return {Promise} The last sequence value.\n */\n\nSequence.prototype.lastValue = function () {\n  return this.db.query(new Select(this, {}, {\n    fields: ['last_value'],\n    single: true\n  })).then(v => v.last_value);\n};\n/**\n * Increment the sequence counter and return the next value.\n *\n * @return {Promise} The next sequence value.\n */\n\n\nSequence.prototype.nextValue = function () {\n  return this.db.query(\"SELECT nextval('\".concat(this.delimitedFullName, \"')\")).then(v => v[0].nextval);\n};\n/**\n * Reset the sequence.\n *\n * @return {Promise} Nothing.\n * @param {Number} [initialValue] - The new value with which to seed the\n * sequence (default 1).\n */\n\n\nSequence.prototype.reset = function (initialValue = 1) {\n  return this.db.query(\"ALTER SEQUENCE \".concat(this.delimitedFullName, \" RESTART WITH $1\"), [initialValue]);\n};\n\nmodule.exports = Sequence;","map":null,"metadata":{},"sourceType":"script"}