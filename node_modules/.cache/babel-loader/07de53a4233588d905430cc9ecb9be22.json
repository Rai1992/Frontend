{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  os: require('os'),\n  utils: require('../utils'),\n  text: require('../text')\n};\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\n\nconst queryResultErrorCode = {\n  /** No data returned from the query. */\n  noData: 0,\n\n  /** No return data was expected. */\n  notEmpty: 1,\n\n  /** Multiple rows were not expected. */\n  multiple: 2\n};\nObject.freeze(queryResultErrorCode);\nconst errorMessages = [{\n  name: 'noData',\n  message: npm.text.noData\n}, {\n  name: 'notEmpty',\n  message: npm.text.notEmpty\n}, {\n  name: 'multiple',\n  message: npm.text.multiple\n}];\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error: (err, e) => {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */\n\nclass QueryResultError extends Error {\n  constructor(code, result, query, values) {\n    const message = errorMessages[code].message;\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.result = result;\n    this.query = query;\n    this.values = values;\n    this.received = result.rows.length;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\n\nQueryResultError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n        gap1 = npm.utils.messageGap(level + 1),\n        lines = ['QueryResultError {', gap1 + 'code: queryResultErrorCode.' + errorMessages[this.code].name, gap1 + 'message: \"' + this.message + '\"', gap1 + 'received: ' + this.received, gap1 + 'query: ' + (typeof this.query === 'string' ? '\"' + this.query + '\"' : JSON.stringify(this.query))];\n\n  if (this.values !== undefined) {\n    lines.push(gap1 + 'values: ' + JSON.stringify(this.values));\n  }\n\n  lines.push(gap0 + '}');\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(QueryResultError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  QueryResultError,\n  queryResultErrorCode\n};","map":null,"metadata":{},"sourceType":"script"}