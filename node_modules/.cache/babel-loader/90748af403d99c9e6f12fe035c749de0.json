{"ast":null,"code":"'use strict';\n\nvar npm = {\n  utils: require('./utils'),\n  batch: require('./ext/batch'),\n  page: require('./ext/page'),\n  sequence: require('./ext/sequence'),\n  stream: require('./ext/stream'),\n  errors: require('./errors')\n};\n/**\r\n * @module spex\r\n * @summary Specialized Promise Extensions\r\n * @author Vitaly Tomilov\r\n *\r\n * @description\r\n * Attaches to an external promise library and provides additional methods built solely\r\n * on the basic promise operations:\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * ### usage\r\n * For any third-party promise library:\r\n * ```js\r\n * var promise = require('bluebird');\r\n * var spex = require('spex')(promise);\r\n * ```\r\n * For ES6 promises:\r\n * ```js\r\n * var spex = require('spex')(Promise);\r\n * ```\r\n *\r\n * @param {Object|Function} promiseLib\r\n * Instance of a promise library to be used by this module.\r\n *\r\n * Some implementations use `Promise` constructor to create a new promise, while\r\n * others use the module's function for it. Both types are supported the same.\r\n *\r\n * Alternatively, an object of type {@link PromiseAdapter} can be passed in, which provides\r\n * compatibility with any promise library outside of the standard.\r\n *\r\n * Passing in a promise library that cannot be recognized will throw\r\n * `Invalid promise library specified.`\r\n *\r\n * @returns {Object}\r\n * Namespace with all supported methods.\r\n *\r\n * @see {@link PromiseAdapter}, {@link batch}, {@link page}, {@link sequence}, {@link stream}\r\n */\n\nfunction main(promiseLib) {\n  var spex = {},\n      // library instance;\n  promise = parsePromiseLib(promiseLib); // promise library parsing;\n\n  var config = {\n    spex: spex,\n    promise: promise,\n    utils: npm.utils(promise)\n  };\n  spex.errors = npm.errors;\n  spex.batch = npm.batch(config);\n  spex.page = npm.page(config);\n  spex.sequence = npm.sequence(config);\n  spex.stream = npm.stream(config);\n  config.utils.extend(spex, '$p', promise);\n  Object.freeze(spex);\n  return spex;\n} //////////////////////////////////////////\n// Parses and validates a promise library;\n\n\nfunction parsePromiseLib(lib) {\n  if (lib) {\n    var promise;\n\n    if (lib instanceof main.PromiseAdapter) {\n      promise = function (func) {\n        return lib.create(func);\n      };\n\n      promise.resolve = lib.resolve;\n      promise.reject = lib.reject;\n      return promise;\n    }\n\n    var t = typeof lib;\n\n    if (t === 'function' || t === 'object') {\n      var Root = typeof lib.Promise === 'function' ? lib.Promise : lib;\n\n      promise = function (func) {\n        return new Root(func);\n      };\n\n      promise.resolve = Root.resolve;\n      promise.reject = Root.reject;\n\n      if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {\n        return promise;\n      }\n    }\n  }\n\n  throw new TypeError('Invalid promise library specified.');\n}\n\nmain.PromiseAdapter = require('./adapter');\nmain.errors = npm.errors;\nObject.freeze(main);\nmodule.exports = main;\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\n\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\n\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */","map":null,"metadata":{},"sourceType":"script"}