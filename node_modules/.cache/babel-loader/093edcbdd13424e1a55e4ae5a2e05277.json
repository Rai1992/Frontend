{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  formatting: require('../../formatting'),\n  QueryFile: require('../../queryFile')\n};\n/**\r\n * @method helpers.concat\r\n * @description\r\n * Formats and concatenates multiple queries into a single query string.\r\n *\r\n * Before joining the queries, the method does the following:\r\n *  - Formats each query, if `values` are provided;\r\n *  - Removes all leading and trailing spaces, tabs and semi-colons;\r\n *  - Automatically skips all empty queries.\r\n *\r\n * @param {array<string|helpers.QueryFormat|QueryFile>} queries\r\n * Array of mixed-type elements:\r\n * - a simple query string, to be used as is\r\n * - a {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`\r\n * - a {@link QueryFile} object\r\n *\r\n * @returns {string}\r\n * Concatenated string with all queries.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const qf1 = new pgp.QueryFile('./query1.sql', {minify: true});\r\n * const qf2 = new pgp.QueryFile('./query2.sql', {minify: true});\r\n *\r\n * const query = pgp.helpers.concat([\r\n *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object\r\n *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters\r\n *     'SELECT count(*) FROM Users', // a simple-string query,\r\n *     qf2 // direct QueryFile object\r\n * ]);\r\n *\r\n * // query = concatenated string with all the queries\r\n */\n\nfunction concat(queries) {\n  if (!Array.isArray(queries)) {\n    throw new TypeError('Parameter \\'queries\\' must be an array.');\n  }\n\n  const all = queries.map((q, index) => {\n    if (typeof q === 'string') {\n      // a simple query string without parameters:\n      return clean(q);\n    }\n\n    if (q && typeof q === 'object') {\n      if (q instanceof npm.QueryFile) {\n        // QueryFile object:\n        return clean(q[npm.formatting.as.ctf.toPostgres]());\n      }\n\n      if ('query' in q) {\n        // object {query, values, options}:\n        return clean(npm.formatting.as.format(q.query, q.values, q.options));\n      }\n    }\n\n    throw new Error('Invalid query element at index ' + index + '.');\n  });\n  return all.filter(q => q).join(';');\n}\n\nfunction clean(q) {\n  // removes from the query all leading and trailing symbols ' ', '\\t' and ';'\n  return q.replace(/^[\\s;]*|[\\s;]*$/g, '');\n}\n\nmodule.exports = concat;\n/**\r\n * @typedef helpers.QueryFormat\r\n * @description\r\n * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are,\r\n * used by {@link helpers.concat}.\r\n *\r\n * @property {string|value|object} query\r\n * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n *\r\n * @property {array|object|value} [values]\r\n * Query-formatting values.\r\n *\r\n * @property {object} [options]\r\n * Query-formatting options, as supported by method {@link formatting.format as.format}.\r\n *\r\n * @see\r\n * {@link formatting.format as.format}\r\n */","map":null,"metadata":{},"sourceType":"script"}