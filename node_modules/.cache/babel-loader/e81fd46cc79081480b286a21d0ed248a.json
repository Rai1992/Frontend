{"ast":null,"code":"'use strict';\n\nconst EOL = require('os').EOL;\n\nconst utils = require('./utils');\n\nconst parsingErrorCode = {\n  unclosedMLC: 0,\n  // Unclosed multi-line comment.\n  unclosedText: 1,\n  // Unclosed text block.\n  unclosedQI: 2,\n  // Unclosed quoted identifier.\n  multiLineQI: 3 // Multi-line quoted identifiers are not supported.\n\n};\nObject.freeze(parsingErrorCode);\nconst errorMessages = [{\n  name: 'unclosedMLC',\n  message: 'Unclosed multi-line comment.'\n}, {\n  name: 'unclosedText',\n  message: 'Unclosed text block.'\n}, {\n  name: 'unclosedQI',\n  message: 'Unclosed quoted identifier.'\n}, {\n  name: 'multiLineQI',\n  message: 'Multi-line quoted identifiers are not supported.'\n}];\n\nclass SQLParsingError extends Error {\n  constructor(code, position) {\n    const err = errorMessages[code].message;\n    const message = 'Error parsing SQL at {line:' + position.line + ',col:' + position.column + '}: ' + err;\n    super(message);\n    this.name = this.constructor.name;\n    this.error = err;\n    this.code = code;\n    this.position = position;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nSQLParsingError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = utils.messageGap(level + 1);\n  const lines = ['SQLParsingError {', gap + 'code: parsingErrorCode.' + errorMessages[this.code].name, gap + 'error: \"' + this.error + '\"', gap + 'position: {line: ' + this.position.line + ', col: ' + this.position.column + '}', utils.messageGap(level) + '}'];\n  return lines.join(EOL);\n};\n\nSQLParsingError.prototype.inspect = function () {\n  return this.toString();\n};\n\nmodule.exports = {\n  SQLParsingError,\n  parsingErrorCode\n};","map":null,"metadata":{},"sourceType":"script"}