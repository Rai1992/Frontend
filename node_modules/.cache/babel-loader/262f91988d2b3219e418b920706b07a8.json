{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst parseKey = require('../util/parse-key');\n\nconst where = require('./where');\n\nconst prepareParams = require('../util/prepare-params');\n/**\n * Represents an UPDATE query.\n *\n * @class\n * @param {Table} source - Database object to query.\n * @param {Object} changes - A map of field names to new values.\n * @param {Object} criteria - A criteria object.\n * @param {Object} [options] - {@link https://massivejs.org/docs/options-objects|Update options}.\n */\n\n\nconst Update = function (source, changes, criteria = {}, options = {}) {\n  let offset = 0;\n  changes = _.pick(changes, source.columns);\n  this.params = prepareParams(_.keys(changes), [changes]);\n  this.changes = _.reduce(changes, (acc, value, key) => {\n    acc.push(\"\\\"\".concat(key, \"\\\" = $\").concat(++offset));\n    return acc;\n  }, []);\n  options = _.defaults(options, {\n    only: false,\n    generator: 'tableGenerator',\n    single: false\n  });\n  this.source = source;\n  this.only = options.only;\n  this.build = options.build;\n  this.decompose = options.decompose;\n  this.document = options.document;\n  this.generator = options.generator;\n  this.single = options.single;\n  this.stream = options.stream; // get fields to return from options\n\n  this.fields = options.fields ? options.fields.map(f => parseKey(f).field) : ['*'];\n\n  if (source.isPkSearch(criteria, options)) {\n    if (_.isPlainObject(criteria)) {\n      // id:val search\n      this.where = where(criteria, this.params.length);\n    } else {\n      // primitive unary pk search\n      this.where = where(_.fromPairs([[source.pk[0], criteria]]), this.params.length);\n      this.single = true;\n    }\n  } else {\n    this.where = where(criteria, this.params.length, this.generator);\n  }\n\n  this.params = this.params.concat(this.where.params);\n};\n/**\n * Format this object into a SQL UPDATE.\n *\n * @return {String} A SQL UPDATE statement.\n */\n\n\nUpdate.prototype.format = function () {\n  let sql = 'UPDATE ';\n\n  if (this.only) {\n    sql += 'ONLY ';\n  }\n\n  sql += \"\".concat(this.source.delimitedFullName, \" SET \").concat(this.changes.join(', '), \" WHERE \").concat(this.where.conditions, \" \");\n  sql += \"RETURNING \".concat(this.fields.join(', '));\n  return sql;\n};\n\nmodule.exports = Update;","map":null,"metadata":{},"sourceType":"script"}