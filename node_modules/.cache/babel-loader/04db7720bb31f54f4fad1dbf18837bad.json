{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  utils: require('../utils'),\n  concat: require('./methods/concat'),\n  insert: require('./methods/insert'),\n  update: require('./methods/update'),\n  values: require('./methods/values'),\n  sets: require('./methods/sets'),\n  TableName: require('./tableName'),\n  ColumnSet: require('./columnSet'),\n  Column: require('./column')\n};\n/**\r\n * @namespace helpers\r\n * @description\r\n * Namespace for query-formatting generators, available as {@link module:pg-promise~helpers pgp.helpers}, after initializing the library.\r\n *\r\n * It is a set of types and methods for generating queries in a fast, flexible and reliable way.\r\n *\r\n * See also: $[Performance Boost].\r\n *\r\n * @property {function} TableName\r\n * {@link helpers.TableName TableName} class constructor.\r\n *\r\n * @property {function} ColumnSet\r\n * {@link helpers.ColumnSet ColumnSet} class constructor.\r\n *\r\n * @property {function} Column\r\n * {@link helpers.Column Column} class constructor.\r\n *\r\n * @property {function} insert\r\n * {@link helpers.insert insert} static method.\r\n *\r\n * @property {function} update\r\n * {@link helpers.update update} static method.\r\n *\r\n * @property {function} values\r\n * {@link helpers.values values} static method.\r\n *\r\n * @property {function} sets\r\n * {@link helpers.sets sets} static method.\r\n *\r\n * @property {function} concat\r\n * {@link helpers.concat concat} static method.\r\n */\n\nmodule.exports = config => {\n  const res = {\n    insert: (data, columns, table) => {\n      const capSQL = config.options && config.options.capSQL;\n      return npm.insert(data, columns, table, capSQL);\n    },\n    update: (data, columns, table, options) => {\n      const capSQL = config.options && config.options.capSQL;\n      return npm.update(data, columns, table, options, capSQL);\n    },\n    concat: npm.concat,\n    values: npm.values,\n    sets: npm.sets,\n    TableName: npm.TableName,\n    ColumnSet: npm.ColumnSet,\n    Column: npm.Column\n  };\n  npm.utils.lock(res, true, config.options);\n  return res;\n};","map":null,"metadata":{},"sourceType":"script"}