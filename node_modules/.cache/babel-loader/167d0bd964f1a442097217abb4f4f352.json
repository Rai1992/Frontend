{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst PromiseAdapter = require('./adapter'); //////////////////////////////////////////\n// Parses and validates a promise library;\n\n\nfunction parsePromiseLib(pl) {\n  let promise;\n\n  if (pl instanceof PromiseAdapter) {\n    promise = function (func) {\n      return pl.create(func);\n    };\n\n    promise.resolve = pl.resolve;\n    promise.reject = pl.reject;\n    promise.all = pl.all;\n    return promise;\n  }\n\n  const t = typeof pl;\n\n  if (t === 'function' || t === 'object') {\n    const Root = typeof pl.Promise === 'function' ? pl.Promise : pl;\n\n    promise = function (func) {\n      return new Root(func);\n    };\n\n    promise.resolve = Root.resolve;\n    promise.reject = Root.reject;\n    promise.all = Root.all;\n\n    if (typeof promise.resolve === 'function' && typeof promise.reject === 'function' && typeof promise.all === 'function') {\n      return promise;\n    }\n  }\n\n  throw new TypeError('Invalid promise library specified.');\n}\n\nfunction init(promiseLib) {\n  const result = {\n    promiseLib\n  };\n\n  if (promiseLib) {\n    result.promise = parsePromiseLib(promiseLib);\n  } else {\n    result.promise = parsePromiseLib(Promise);\n    result.promiseLib = Promise;\n  }\n\n  return result;\n}\n\nmodule.exports = init;","map":null,"metadata":{},"sourceType":"script"}