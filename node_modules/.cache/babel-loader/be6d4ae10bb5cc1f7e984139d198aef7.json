{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar colors = require('./colors');\n\nvar $def = {\n  // process.stdout:\n  log: console.log,\n  info: console.info,\n  // process.stderr:\n  error: console.error,\n  warn: console.warn\n};\n\nfunction colorize(value, color, isMsg) {\n  value = isMsg && typeof value === 'string' ? value : util.inspect(value);\n  return '\\x1b[' + color + 'm' + value + '\\x1b[0m';\n}\n\nfunction format(stream, values, color) {\n  if (stream.isTTY) {\n    if (values.length && typeof values[0] === 'string') {\n      return [colorize(util.format.apply(null, values), color, true)];\n    }\n\n    return Object.keys(values).map(function (key) {\n      return colorize(values[key], color);\n    });\n  }\n\n  return values;\n}\n/**\r\n * @class Writer\r\n * @param noLock\r\n */\n\n\nfunction Writer(noLock) {\n  var self = this;\n  /**\r\n   * @method Writer.log\r\n   * @description\r\n   * Formats and sends console.log into stdout.\r\n   */\n\n  this.log = function () {\n    $def.log.apply(null, format(process.stdout, arguments, getColor(self.log, colors.log)));\n  };\n  /**\r\n   * @method Writer.error\r\n   * @description\r\n   * Formats and sends console.error into stderr.\r\n   */\n\n\n  this.error = function () {\n    $def.error.apply(null, format(process.stderr, arguments, getColor(self.error, colors.error)));\n  };\n  /**\r\n   * @method Writer.warn\r\n   * @description\r\n   * Formats and sends console.log into stderr.\r\n   */\n\n\n  this.warn = function () {\n    $def.warn.apply(null, format(process.stderr, arguments, getColor(self.warn, colors.warn)));\n  };\n  /**\r\n   * @method Writer.info\r\n   * @description\r\n   * Formats and sends console.log into stdout.\r\n   */\n\n\n  this.info = function () {\n    $def.info.apply(null, format(process.stdout, arguments, getColor(self.info, colors.info)));\n  };\n  /**\r\n   * @method Writer.success\r\n   * @description\r\n   * Formats and sends console.log into stdout.\r\n   *\r\n   * This is a custom method, i.e. doesn't exist on the standard console.\r\n   */\n\n\n  this.success = function () {\n    $def.log.apply(null, format(process.stdout, arguments, getColor(self.success, colors.success)));\n  };\n  /**\r\n   * @method Writer.ok\r\n   * @description\r\n   * Formats and sends console.log into stdout.\r\n   *\r\n   * This is a custom method, i.e. doesn't exist on the standard console.\r\n   */\n\n\n  this.ok = function () {\n    $def.log.apply(null, format(process.stdout, arguments, getColor(self.ok, colors.ok)));\n  };\n  /**\r\n   * @method Writer.write\r\n   * @description\r\n   * Formats and sends custom-color values either into stdout or stderr.\r\n   *\r\n   * @param {} values - output parameters\r\n   *\r\n   * @param {number} color - output color: 0 <= color <= 256\r\n   *\r\n   * @param {boolean}[isError=false] - sends console.error into stderr;\r\n   * By default, the method sends console.log into stdout.\r\n   *\r\n   */\n\n\n  this.write = function (values, color, isError) {\n    var method = $def.log,\n        stream = process.stdout;\n\n    if (isError) {\n      method = $def.error;\n      stream = process.stderr;\n    }\n\n    if (color !== +color || color < 0 || color > 256) {\n      method.apply(null, values);\n    } else {\n      method.apply(null, format(stream, values, color));\n    }\n  };\n\n  addProperties('log');\n  addProperties('error');\n  addProperties('warn');\n  addProperties('info');\n  addProperties('success');\n  addProperties('ok');\n  /**\r\n   * @method Writer.setBright\r\n   * @description\r\n   * Set brightness for all methods at once.\r\n   *\r\n   * @param {boolean} [bright=true]\r\n   * Indicates whether the color is to be set to be bright.\r\n   *\r\n   */\n\n  this.setBright = function (bright) {\n    // set to bright colors, if the flag is truthy or undefined;\n    // set to dim colors, if flag is falsy\n    bright = bright === undefined ? true : !!bright;\n    self.log.bright = bright;\n    self.error.bright = bright;\n    self.warn.bright = bright;\n    self.info.bright = bright;\n    self.success.bright = bright;\n    self.ok.bright = bright;\n  };\n\n  if (!noLock) {\n    Object.freeze(this);\n  }\n\n  function addProperties(name) {\n    // brightness for the predefined color:\n    Object.defineProperty(self[name], 'bright', {\n      value: false,\n      writable: true\n    }); // override for the predefined color:\n\n    Object.defineProperty(self[name], 'color', {\n      writable: true\n    });\n    Object.seal(self[name]);\n  }\n}\n\nfunction getColor(prop, color) {\n  var c = prop.color;\n  return c === +c && c >= 0 && c <= 256 ? c : prop.bright ? color.bright : color.normal;\n}\n\nmodule.exports = Writer;","map":null,"metadata":{},"sourceType":"script"}