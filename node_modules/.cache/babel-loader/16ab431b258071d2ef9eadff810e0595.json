{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n'use strict';\n\nconst npm = {\n  assertOptions: require('assert-options'),\n  utils: require('./utils')\n};\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\n\nconst isolationLevel = {\n  /** Isolation level not specified. */\n  none: 0,\n\n  /** ISOLATION LEVEL SERIALIZABLE */\n  serializable: 1,\n\n  /** ISOLATION LEVEL REPEATABLE READ */\n  repeatableRead: 2,\n\n  /** ISOLATION LEVEL READ COMMITTED */\n  readCommitted: 3 // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n  // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\n  // => skipping `READ UNCOMMITTED`.\n\n};\nObject.freeze(isolationLevel);\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * **Alternative Syntax:** `TransactionMode({tiLevel, readOnly, deferrable})` &#8658; {@link TransactionMode}\r\n *\r\n * Constructs a complete transaction-opening command, based on the parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {txMode.isolationLevel|object} [tiLevel]\r\n * Transaction Isolation Level, or an object with parameters, if the alternative\r\n * syntax is used.\r\n *\r\n * @param {boolean} [readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const TransactionMode = pgp.txMode.TransactionMode;\r\n * const isolationLevel = pgp.txMode.isolationLevel;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\n\nfunction TransactionMode(tiLevel, readOnly, deferrable) {\n  if (!(this instanceof TransactionMode)) {\n    return new TransactionMode(tiLevel, readOnly, deferrable);\n  }\n\n  if (tiLevel && typeof tiLevel === 'object') {\n    npm.assertOptions(tiLevel, ['tiLevel', 'deferrable', 'readOnly']);\n    readOnly = tiLevel.readOnly;\n    deferrable = tiLevel.deferrable;\n    tiLevel = tiLevel.tiLevel;\n  }\n\n  let level,\n      accessMode,\n      deferrableMode,\n      capBegin,\n      begin = 'begin';\n  tiLevel = tiLevel > 0 ? parseInt(tiLevel) : 0;\n\n  if (tiLevel > 0 && tiLevel < 4) {\n    const values = ['serializable', 'repeatable read', 'read committed'];\n    level = 'isolation level ' + values[tiLevel - 1];\n  }\n\n  if (readOnly) {\n    accessMode = 'read only';\n  } else {\n    if (readOnly !== undefined) {\n      accessMode = 'read write';\n    }\n  } // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n  // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\n\n\n  if (tiLevel === isolationLevel.serializable && readOnly) {\n    if (deferrable) {\n      deferrableMode = 'deferrable';\n    } else {\n      if (deferrable !== undefined) {\n        deferrableMode = 'not deferrable';\n      }\n    }\n  }\n\n  if (level) {\n    begin += ' ' + level;\n  }\n\n  if (accessMode) {\n    begin += ' ' + accessMode;\n  }\n\n  if (deferrableMode) {\n    begin += ' ' + deferrableMode;\n  }\n\n  capBegin = begin.toUpperCase();\n  /**\r\n   * @method txMode.TransactionMode#begin\r\n   * @description\r\n   * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n   *\r\n   * This method is primarily for internal use by the library.\r\n   *\r\n   * @param {boolean} [cap=false]\r\n   * Indicates whether the returned SQL must be capitalized.\r\n   *\r\n   * @returns {string}\r\n   */\n\n  this.begin = cap => {\n    return cap ? capBegin : begin;\n  };\n}\n\nnpm.utils.addInspection(TransactionMode, function () {\n  return this.begin(true);\n});\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\n\nmodule.exports = {\n  isolationLevel,\n  TransactionMode\n};\nObject.freeze(module.exports);","map":null,"metadata":{},"sourceType":"script"}