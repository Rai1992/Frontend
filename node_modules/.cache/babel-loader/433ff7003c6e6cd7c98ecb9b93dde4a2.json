{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst util = require('util');\n\nconst Transform = require('stream').Transform;\n/**\n * A stream which processes single-key results objects into their values for\n * convenience on the client side.\n *\n * @class\n * @param {Object} options - Stream options.\n */\n\n\nfunction SingleValueStream() {\n  Transform.call(this, {\n    objectMode: true\n  });\n}\n\nutil.inherits(SingleValueStream, Transform);\n/**\n * Converts a single-key object into its value.\n *\n * @param {Object} obj - A JavaScript object.\n * @return {Any} The scalar value of the object's only key.\n */\n\nSingleValueStream.singleValue = obj => {\n  const values = _.values(obj);\n\n  if (values.length !== 1) {\n    throw new Error('cannot pull single value from a multi-valued object');\n  }\n\n  return values[0];\n};\n/**\n * Implement the Transform stream that invokes singleValue on everything which\n * passes through it.\n *\n * @param {Object} obj - The current item being transformed.\n * @param {String} encoding - Unused with objectMode.\n * @param {Function} callback - Callback on completion of the singleValue transformation.\n * @return {void}\n */\n\n\nSingleValueStream.prototype._transform = function _transform(obj, encoding, callback) {\n  try {\n    this.push(SingleValueStream.singleValue(obj));\n  } catch (err) {\n    return callback(err);\n  }\n\n  return callback();\n};\n\nexports = module.exports = SingleValueStream;","map":null,"metadata":{},"sourceType":"script"}