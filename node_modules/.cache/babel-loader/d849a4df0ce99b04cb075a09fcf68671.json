{"ast":null,"code":"'use strict';\n/**\n * Base class for a database entity or script file.\n *\n * @class\n * @param {Object} spec - Entity arguments:\n * @param {Object} spec.db - A {@linkcode Database}.\n * @param {String} spec.name - The entity's name.\n * @param {String} spec.path - Path to the entity, if a file.\n * @param {String} spec.schema - Entity's owning schema, if a database object.\n * @param {String} spec.loader - Name of the loader that discovered the entity.\n */\n\nconst Entity = function (spec) {\n  if (spec.path) {\n    this.path = spec.path;\n  } else {\n    this.path = spec.schema === spec.db.currentSchema ? spec.name : \"\".concat(spec.schema, \".\").concat(spec.name);\n  }\n\n  this.schema = spec.schema || spec.db.currentSchema;\n  this.name = spec.name;\n  this.db = spec.db;\n  this.loader = spec.loader; // create delimited names now instead of at query time\n\n  this.delimitedName = \"\\\"\".concat(this.name, \"\\\"\");\n  this.delimitedSchema = \"\\\"\".concat(this.schema, \"\\\"\"); // handle naming when schema is other than default:\n\n  if (this.schema !== this.db.currentSchema) {\n    this.delimitedFullName = \"\".concat(this.delimitedSchema, \".\").concat(this.delimitedName);\n  } else {\n    this.delimitedFullName = this.delimitedName;\n  }\n};\n\nmodule.exports = Entity;","map":null,"metadata":{},"sourceType":"script"}