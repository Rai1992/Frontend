{"ast":null,"code":"'use strict';\n\nvar npm = {\n  stream: require('stream'),\n  util: require('util')\n}; /////////////////////////////////////\n// Checks if the value is a promise;\n\nfunction isPromise(value) {\n  return value && typeof value.then === 'function';\n} ////////////////////////////////////////////\n// Checks object for being a readable stream;\n\n\nfunction isReadableStream(obj) {\n  return obj instanceof npm.stream.Stream && typeof obj._read === 'function' && typeof obj._readableState === 'object';\n} ////////////////////////////////////////////////////////////\n// Sets an object property as read-only and non-enumerable.\n\n\nfunction extend(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value: value,\n    configurable: false,\n    enumerable: false,\n    writable: false\n  });\n} ///////////////////////////////////////////\n// Returns a space gap for console output;\n\n\nfunction messageGap(level) {\n  return Array(1 + level * 4).join(' ');\n}\n\nfunction formatError(error, level) {\n  var names = ['BatchError', 'PageError', 'SequenceError'];\n  var msg = npm.util.inspect(error);\n\n  if (error instanceof Error) {\n    if (names.indexOf(error.name) === -1) {\n      var gap = messageGap(level);\n      msg = msg.split('\\n').map(function (line, index) {\n        return (index ? gap : '') + line;\n      }).join('\\n');\n    } else {\n      msg = error.toString(level);\n    }\n  }\n\n  return msg;\n} ////////////////////////////////////////////////////////\n// Adds prototype inspection, with support of the newer\n// Custom Inspection, which was added in Node.js 6.x\n\n\nfunction addInspection(type, cb) {\n  // istanbul ignore next;\n  if (npm.util.inspect.custom) {\n    // Custom inspection is supported:\n    type.prototype[npm.util.inspect.custom] = cb;\n  } else {\n    // Use classic inspection:\n    type.prototype.inspect = cb;\n  }\n}\n\nmodule.exports = {\n  addInspection: addInspection,\n  formatError: formatError,\n  isPromise: isPromise,\n  isReadableStream: isReadableStream,\n  messageGap: messageGap,\n  extend: extend\n};","map":null,"metadata":{},"sourceType":"script"}